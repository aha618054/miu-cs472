{"ast":null,"code":"var _jsxFileName = \"D:\\\\MIU\\\\daily-diary-fullstackjs-ci-cd\\\\daily-diary-front\\\\src\\\\contexts\\\\PostsContext.tsx\",\n  _s = $RefreshSig$();\nimport { createContext, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initStateValue = {\n  posts: [],\n  searchDate: new Date(),\n  isVoted: false,\n  isAddedNew: false,\n  loading: false,\n  notify: {\n    status: \"success\",\n    message: \"\"\n  }\n};\nconst initContextValue = {\n  ...initStateValue,\n  updatePosts: posts => {},\n  updateSearchDate: searchDate => {},\n  updateIsVoted: isVoted => {},\n  updateIsAddedNew: isVoted => {},\n  updateLoading: loading => {},\n  updateNotify: notify => {}\n};\nexport const GlobalContext = /*#__PURE__*/createContext(initContextValue);\nexport function PostsContext({\n  children\n}) {\n  _s();\n  const [state, setState] = useState(initStateValue);\n  const updatePosts = posts => {\n    setState(prev => ({\n      ...prev,\n      posts\n    }));\n  };\n  const updateSearchDate = searchDate => {\n    setState(prev => ({\n      ...prev,\n      searchDate\n    }));\n  };\n  const updateIsVoted = isVoted => {\n    setState(prev => ({\n      ...prev,\n      isVoted\n    }));\n  };\n  const updateIsAddedNew = isAddedNew => {\n    setState(prev => ({\n      ...prev,\n      isAddedNew\n    }));\n  };\n  const updateLoading = loading => {\n    setState(prev => ({\n      ...prev,\n      loading\n    }));\n  };\n  const updateNotify = notify => {\n    setState(prev => ({\n      ...prev,\n      notify\n    }));\n  };\n  return /*#__PURE__*/_jsxDEV(GlobalContext.Provider, {\n    value: {\n      posts: state.posts,\n      searchDate: state.searchDate,\n      isVoted: state.isVoted,\n      isAddedNew: state.isAddedNew,\n      loading: state.loading,\n      notify: state.notify,\n      updatePosts,\n      updateSearchDate,\n      updateIsVoted,\n      updateIsAddedNew,\n      updateLoading,\n      updateNotify\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 9\n  }, this);\n}\n_s(PostsContext, \"8NE/LJNgMuB9zFYEYahgz0RSuEM=\");\n_c = PostsContext;\nvar _c;\n$RefreshReg$(_c, \"PostsContext\");","map":{"version":3,"names":["createContext","useState","jsxDEV","_jsxDEV","initStateValue","posts","searchDate","Date","isVoted","isAddedNew","loading","notify","status","message","initContextValue","updatePosts","updateSearchDate","updateIsVoted","updateIsAddedNew","updateLoading","updateNotify","GlobalContext","PostsContext","children","_s","state","setState","prev","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/MIU/daily-diary-fullstackjs-ci-cd/daily-diary-front/src/contexts/PostsContext.tsx"],"sourcesContent":["import { createContext, ReactNode, useState } from \"react\";\r\nimport { Post } from \"../models/Post\";\r\nimport { AlertColor } from \"@mui/material\";\r\n\r\ntype StateType = {\r\n    posts: Post[];\r\n    searchDate: Date;\r\n    isVoted: boolean;\r\n    isAddedNew: boolean;\r\n    loading: boolean;\r\n    notify: Notify;\r\n};\r\n\r\ntype Notify = {\r\n    status: AlertColor;\r\n    message: string;\r\n};\r\n\r\nconst initStateValue = {\r\n    posts: [] as Post[],\r\n    searchDate: new Date(),\r\n    isVoted: false,\r\n    isAddedNew: false,\r\n    loading: false,\r\n    notify: { status: \"success\" as AlertColor, message: \"\" },\r\n};\r\n\r\nexport type ContextType = {\r\n    posts: Post[];\r\n    searchDate: Date;\r\n    isVoted: boolean;\r\n    isAddedNew: boolean;\r\n    loading: boolean;\r\n    notify: {\r\n        status: AlertColor;\r\n        message: string;\r\n    };\r\n    updatePosts: Function;\r\n    updateSearchDate: Function;\r\n    updateIsVoted: Function;\r\n    updateIsAddedNew: Function;\r\n    updateLoading: Function;\r\n    updateNotify: Function;\r\n};\r\n\r\nconst initContextValue = {\r\n    ...initStateValue,\r\n    updatePosts: (posts: Post[]) => {},\r\n    updateSearchDate: (searchDate: Date) => {},\r\n    updateIsVoted: (isVoted: boolean) => {},\r\n    updateIsAddedNew: (isVoted: boolean) => {},\r\n    updateLoading: (loading: boolean) => {},\r\n    updateNotify: (notify: Notify) => {},\r\n};\r\n\r\nexport const GlobalContext = createContext(initContextValue);\r\n\r\nexport function PostsContext({ children }: { children: ReactNode }) {\r\n    const [state, setState] = useState<StateType>(initStateValue);\r\n\r\n    const updatePosts = (posts: Post[]) => {\r\n        setState((prev) => ({ ...prev, posts }));\r\n    };\r\n\r\n    const updateSearchDate = (searchDate: Date) => {\r\n        setState((prev) => ({ ...prev, searchDate }));\r\n    };\r\n\r\n    const updateIsVoted = (isVoted: boolean) => {\r\n        setState((prev) => ({ ...prev, isVoted }));\r\n    };\r\n\r\n    const updateIsAddedNew = (isAddedNew: boolean) => {\r\n        setState((prev) => ({ ...prev, isAddedNew }));\r\n    };\r\n\r\n    const updateLoading = (loading: boolean) => {\r\n        setState((prev) => ({ ...prev, loading }));\r\n    };\r\n\r\n    const updateNotify = (notify: Notify) => {\r\n        setState((prev) => ({ ...prev, notify }));\r\n    };\r\n\r\n    return (\r\n        <GlobalContext.Provider\r\n            value={{\r\n                posts: state.posts,\r\n                searchDate: state.searchDate,\r\n                isVoted: state.isVoted,\r\n                isAddedNew: state.isAddedNew,\r\n                loading: state.loading,\r\n                notify: state.notify,\r\n                updatePosts,\r\n                updateSearchDate,\r\n                updateIsVoted,\r\n                updateIsAddedNew,\r\n                updateLoading,\r\n                updateNotify,\r\n            }}\r\n        >\r\n            {children}\r\n        </GlobalContext.Provider>\r\n    );\r\n}\r\n"],"mappings":";;AAAA,SAASA,aAAa,EAAaC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAkB3D,MAAMC,cAAc,GAAG;EACnBC,KAAK,EAAE,EAAY;EACnBC,UAAU,EAAE,IAAIC,IAAI,CAAC,CAAC;EACtBC,OAAO,EAAE,KAAK;EACdC,UAAU,EAAE,KAAK;EACjBC,OAAO,EAAE,KAAK;EACdC,MAAM,EAAE;IAAEC,MAAM,EAAE,SAAuB;IAAEC,OAAO,EAAE;EAAG;AAC3D,CAAC;AAoBD,MAAMC,gBAAgB,GAAG;EACrB,GAAGV,cAAc;EACjBW,WAAW,EAAGV,KAAa,IAAK,CAAC,CAAC;EAClCW,gBAAgB,EAAGV,UAAgB,IAAK,CAAC,CAAC;EAC1CW,aAAa,EAAGT,OAAgB,IAAK,CAAC,CAAC;EACvCU,gBAAgB,EAAGV,OAAgB,IAAK,CAAC,CAAC;EAC1CW,aAAa,EAAGT,OAAgB,IAAK,CAAC,CAAC;EACvCU,YAAY,EAAGT,MAAc,IAAK,CAAC;AACvC,CAAC;AAED,OAAO,MAAMU,aAAa,gBAAGrB,aAAa,CAACc,gBAAgB,CAAC;AAE5D,OAAO,SAASQ,YAAYA,CAAC;EAAEC;AAAkC,CAAC,EAAE;EAAAC,EAAA;EAChE,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGzB,QAAQ,CAAYG,cAAc,CAAC;EAE7D,MAAMW,WAAW,GAAIV,KAAa,IAAK;IACnCqB,QAAQ,CAAEC,IAAI,KAAM;MAAE,GAAGA,IAAI;MAAEtB;IAAM,CAAC,CAAC,CAAC;EAC5C,CAAC;EAED,MAAMW,gBAAgB,GAAIV,UAAgB,IAAK;IAC3CoB,QAAQ,CAAEC,IAAI,KAAM;MAAE,GAAGA,IAAI;MAAErB;IAAW,CAAC,CAAC,CAAC;EACjD,CAAC;EAED,MAAMW,aAAa,GAAIT,OAAgB,IAAK;IACxCkB,QAAQ,CAAEC,IAAI,KAAM;MAAE,GAAGA,IAAI;MAAEnB;IAAQ,CAAC,CAAC,CAAC;EAC9C,CAAC;EAED,MAAMU,gBAAgB,GAAIT,UAAmB,IAAK;IAC9CiB,QAAQ,CAAEC,IAAI,KAAM;MAAE,GAAGA,IAAI;MAAElB;IAAW,CAAC,CAAC,CAAC;EACjD,CAAC;EAED,MAAMU,aAAa,GAAIT,OAAgB,IAAK;IACxCgB,QAAQ,CAAEC,IAAI,KAAM;MAAE,GAAGA,IAAI;MAAEjB;IAAQ,CAAC,CAAC,CAAC;EAC9C,CAAC;EAED,MAAMU,YAAY,GAAIT,MAAc,IAAK;IACrCe,QAAQ,CAAEC,IAAI,KAAM;MAAE,GAAGA,IAAI;MAAEhB;IAAO,CAAC,CAAC,CAAC;EAC7C,CAAC;EAED,oBACIR,OAAA,CAACkB,aAAa,CAACO,QAAQ;IACnBC,KAAK,EAAE;MACHxB,KAAK,EAAEoB,KAAK,CAACpB,KAAK;MAClBC,UAAU,EAAEmB,KAAK,CAACnB,UAAU;MAC5BE,OAAO,EAAEiB,KAAK,CAACjB,OAAO;MACtBC,UAAU,EAAEgB,KAAK,CAAChB,UAAU;MAC5BC,OAAO,EAAEe,KAAK,CAACf,OAAO;MACtBC,MAAM,EAAEc,KAAK,CAACd,MAAM;MACpBI,WAAW;MACXC,gBAAgB;MAChBC,aAAa;MACbC,gBAAgB;MAChBC,aAAa;MACbC;IACJ,CAAE;IAAAG,QAAA,EAEDA;EAAQ;IAAAO,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAEjC;AAACT,EAAA,CA/CeF,YAAY;AAAAY,EAAA,GAAZZ,YAAY;AAAA,IAAAY,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}