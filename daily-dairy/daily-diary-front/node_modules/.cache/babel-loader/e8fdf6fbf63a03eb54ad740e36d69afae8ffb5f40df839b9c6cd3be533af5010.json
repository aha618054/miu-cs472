{"ast":null,"code":"import{Rating}from\"@mui/material\";import{useContext}from\"react\";import{GlobalContext}from\"../../../contexts/PostsContext\";import{PostService}from\"../../../services/post/postService\";import{convertDateToFormat}from\"../../../utils/utils\";import{CustomError}from\"../../../utils/customError\";import{jsx as _jsx,Fragment as _Fragment}from\"react/jsx-runtime\";export default function Votes(_ref){let{post}=_ref;const postService=new PostService();const{searchDate,updateIsVoted,updateLoading,updateNotify}=useContext(GlobalContext);const setNewValue=newValue=>{if(newValue){post.vote=newValue;votedPost(post.vote);}};const votedPost=async votes=>{updateLoading(true);try{await postService.votedPostById(post.id,convertDateToFormat(searchDate,\"MM-dd-yyyy\"),votes);updateIsVoted(true);updateLoading(false);updateNotify({status:\"success\",message:\"Voted post successfully!\"});}catch(error){let errMsg=\"Unknow error\";if(error instanceof CustomError){errMsg=error.message;}updateLoading(false);updateNotify({status:\"error\",message:errMsg});}};return/*#__PURE__*/_jsx(_Fragment,{children:/*#__PURE__*/_jsx(Rating,{name:\"customized-10\",defaultValue:0,value:post.vote,precision:1,max:10,onChange:(event,newValue)=>{setNewValue(newValue);}})});}","map":{"version":3,"names":["Rating","useContext","GlobalContext","PostService","convertDateToFormat","CustomError","jsx","_jsx","Fragment","_Fragment","Votes","_ref","post","postService","searchDate","updateIsVoted","updateLoading","updateNotify","setNewValue","newValue","vote","votedPost","votes","votedPostById","id","status","message","error","errMsg","children","name","defaultValue","value","precision","max","onChange","event"],"sources":["D:/MIU/daily-diary-fullstackjs-ci-cd/daily-diary-front/src/components/Post/Votes/Votes.tsx"],"sourcesContent":["import { Rating } from \"@mui/material\";\r\nimport { Post } from \"../../../models/Post\";\r\nimport { useContext } from \"react\";\r\nimport { GlobalContext } from \"../../../contexts/PostsContext\";\r\nimport { PostService } from \"../../../services/post/postService\";\r\nimport { convertDateToFormat } from \"../../../utils/utils\";\r\nimport { CustomError } from \"../../../utils/customError\";\r\n\r\nexport default function Votes({ post }: { post: Post }) {\r\n    const postService = new PostService();\r\n    const { searchDate, updateIsVoted, updateLoading, updateNotify } =\r\n        useContext(GlobalContext);\r\n\r\n    const setNewValue = (newValue: number | null) => {\r\n        if (newValue) {\r\n            post.vote = newValue;\r\n            votedPost(post.vote);\r\n        }\r\n    };\r\n\r\n    const votedPost = async (votes: number) => {\r\n        updateLoading(true);\r\n        try {\r\n            await postService.votedPostById(\r\n                post.id,\r\n                convertDateToFormat(searchDate, \"MM-dd-yyyy\"),\r\n                votes\r\n            );\r\n\r\n            updateIsVoted(true);\r\n            updateLoading(false);\r\n            updateNotify({\r\n                status: \"success\",\r\n                message: \"Voted post successfully!\",\r\n            });\r\n        } catch (error) {\r\n            let errMsg: string = \"Unknow error\";\r\n            if (error instanceof CustomError) {\r\n                errMsg = error.message;\r\n            }\r\n\r\n            updateLoading(false);\r\n            updateNotify({\r\n                status: \"error\",\r\n                message: errMsg,\r\n            });\r\n        }\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Rating\r\n                name=\"customized-10\"\r\n                defaultValue={0}\r\n                value={post.vote}\r\n                precision={1}\r\n                max={10}\r\n                onChange={(event, newValue) => {\r\n                    setNewValue(newValue);\r\n                }}\r\n            />\r\n        </>\r\n    );\r\n}\r\n"],"mappings":"AAAA,OAASA,MAAM,KAAQ,eAAe,CAEtC,OAASC,UAAU,KAAQ,OAAO,CAClC,OAASC,aAAa,KAAQ,gCAAgC,CAC9D,OAASC,WAAW,KAAQ,oCAAoC,CAChE,OAASC,mBAAmB,KAAQ,sBAAsB,CAC1D,OAASC,WAAW,KAAQ,4BAA4B,CAAC,OAAAC,GAAA,IAAAC,IAAA,CAAAC,QAAA,IAAAC,SAAA,yBAEzD,cAAe,SAAS,CAAAC,KAAKA,CAAAC,IAAA,CAA2B,IAA1B,CAAEC,IAAqB,CAAC,CAAAD,IAAA,CAClD,KAAM,CAAAE,WAAW,CAAG,GAAI,CAAAV,WAAW,CAAC,CAAC,CACrC,KAAM,CAAEW,UAAU,CAAEC,aAAa,CAAEC,aAAa,CAAEC,YAAa,CAAC,CAC5DhB,UAAU,CAACC,aAAa,CAAC,CAE7B,KAAM,CAAAgB,WAAW,CAAIC,QAAuB,EAAK,CAC7C,GAAIA,QAAQ,CAAE,CACVP,IAAI,CAACQ,IAAI,CAAGD,QAAQ,CACpBE,SAAS,CAACT,IAAI,CAACQ,IAAI,CAAC,CACxB,CACJ,CAAC,CAED,KAAM,CAAAC,SAAS,CAAG,KAAO,CAAAC,KAAa,EAAK,CACvCN,aAAa,CAAC,IAAI,CAAC,CACnB,GAAI,CACA,KAAM,CAAAH,WAAW,CAACU,aAAa,CAC3BX,IAAI,CAACY,EAAE,CACPpB,mBAAmB,CAACU,UAAU,CAAE,YAAY,CAAC,CAC7CQ,KACJ,CAAC,CAEDP,aAAa,CAAC,IAAI,CAAC,CACnBC,aAAa,CAAC,KAAK,CAAC,CACpBC,YAAY,CAAC,CACTQ,MAAM,CAAE,SAAS,CACjBC,OAAO,CAAE,0BACb,CAAC,CAAC,CACN,CAAE,MAAOC,KAAK,CAAE,CACZ,GAAI,CAAAC,MAAc,CAAG,cAAc,CACnC,GAAID,KAAK,WAAY,CAAAtB,WAAW,CAAE,CAC9BuB,MAAM,CAAGD,KAAK,CAACD,OAAO,CAC1B,CAEAV,aAAa,CAAC,KAAK,CAAC,CACpBC,YAAY,CAAC,CACTQ,MAAM,CAAE,OAAO,CACfC,OAAO,CAAEE,MACb,CAAC,CAAC,CACN,CACJ,CAAC,CAED,mBACIrB,IAAA,CAAAE,SAAA,EAAAoB,QAAA,cACItB,IAAA,CAACP,MAAM,EACH8B,IAAI,CAAC,eAAe,CACpBC,YAAY,CAAE,CAAE,CAChBC,KAAK,CAAEpB,IAAI,CAACQ,IAAK,CACjBa,SAAS,CAAE,CAAE,CACbC,GAAG,CAAE,EAAG,CACRC,QAAQ,CAAEA,CAACC,KAAK,CAAEjB,QAAQ,GAAK,CAC3BD,WAAW,CAACC,QAAQ,CAAC,CACzB,CAAE,CACL,CAAC,CACJ,CAAC,CAEX","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}