{"ast":null,"code":"import{APIService}from\"../apiService\";import{StatusCode}from\"../../models/enums/StatusCodeEnum\";export class PostService extends APIService{constructor(){super(...arguments);this.addPost=async(date,post)=>{const url=\"\".concat(this.getBaseUrl(),\"/posts\");const requestBody={...post,date:date};const response=await this.postData(url,requestBody);if(response.status!==StatusCode.CREATED){await this.throwError(response);}return await response.json();};this.getAllPosts=async date=>{const url=\"\".concat(this.getBaseUrl(),\"/posts?date=\").concat(date);const response=await this.getData(url);if(response.status!==StatusCode.SUCCESS){await this.throwError(response);}return await response.json();};this.getPostById=async(id,date)=>{const url=\"\".concat(this.getBaseUrl(),\"/posts/\").concat(id,\"?date=\").concat(date);const response=await this.getData(url);if(response.status!==StatusCode.SUCCESS){await this.throwError(response);}return await response.json();};this.votedPostById=async(id,date,votes)=>{const url=\"\".concat(this.getBaseUrl(),\"/posts/\").concat(id);const requestBody={date:date,votes:votes};const response=await this.patchData(url,requestBody);if(response.status!==StatusCode.SUCCESS){await this.throwError(response);}return await response.json();};}}","map":{"version":3,"names":["APIService","StatusCode","PostService","constructor","arguments","addPost","date","post","url","concat","getBaseUrl","requestBody","response","postData","status","CREATED","throwError","json","getAllPosts","getData","SUCCESS","getPostById","id","votedPostById","votes","patchData"],"sources":["D:/MIU/daily-diary-fullstackjs-ci-cd/daily-diary-front/src/services/post/postService.ts"],"sourcesContent":["import { Post } from \"../../models/Post\";\r\nimport { APIService } from \"../apiService\";\r\nimport { StatusCode } from \"../../models/enums/StatusCodeEnum\";\r\n\r\nexport class PostService extends APIService {\r\n    addPost = async (date: string, post: Post): Promise<Post> => {\r\n        const url: string = `${this.getBaseUrl()}/posts`;\r\n        const requestBody = {\r\n            ...post,\r\n            date: date,\r\n        };\r\n        const response: Response = await this.postData(url, requestBody);\r\n\r\n        if (response.status !== StatusCode.CREATED) {\r\n            await this.throwError(response);\r\n        }\r\n\r\n        return await response.json();\r\n    };\r\n\r\n    getAllPosts = async (date: string): Promise<Post[]> => {\r\n        const url: string = `${this.getBaseUrl()}/posts?date=${date}`;\r\n        const response: Response = await this.getData(url);\r\n\r\n        if (response.status !== StatusCode.SUCCESS) {\r\n            await this.throwError(response);\r\n        }\r\n\r\n        return await response.json();\r\n    };\r\n\r\n    getPostById = async (id: string, date: string): Promise<Post> => {\r\n        const url: string = `${this.getBaseUrl()}/posts/${id}?date=${date}`;\r\n        const response: Response = await this.getData(url);\r\n\r\n        if (response.status !== StatusCode.SUCCESS) {\r\n            await this.throwError(response);\r\n        }\r\n\r\n        return await response.json();\r\n    };\r\n\r\n    votedPostById = async (\r\n        id: string,\r\n        date: string,\r\n        votes: number\r\n    ): Promise<Post> => {\r\n        const url: string = `${this.getBaseUrl()}/posts/${id}`;\r\n        const requestBody = {\r\n            date: date,\r\n            votes: votes,\r\n        };\r\n\r\n        const response: Response = await this.patchData(url, requestBody);\r\n\r\n        if (response.status !== StatusCode.SUCCESS) {\r\n            await this.throwError(response);\r\n        }\r\n        return await response.json();\r\n    };\r\n}\r\n"],"mappings":"AACA,OAASA,UAAU,KAAQ,eAAe,CAC1C,OAASC,UAAU,KAAQ,mCAAmC,CAE9D,MAAO,MAAM,CAAAC,WAAW,QAAS,CAAAF,UAAW,CAAAG,YAAA,WAAAC,SAAA,OACxCC,OAAO,CAAG,MAAOC,IAAY,CAAEC,IAAU,GAAoB,CACzD,KAAM,CAAAC,GAAW,IAAAC,MAAA,CAAM,IAAI,CAACC,UAAU,CAAC,CAAC,UAAQ,CAChD,KAAM,CAAAC,WAAW,CAAG,CAChB,GAAGJ,IAAI,CACPD,IAAI,CAAEA,IACV,CAAC,CACD,KAAM,CAAAM,QAAkB,CAAG,KAAM,KAAI,CAACC,QAAQ,CAACL,GAAG,CAAEG,WAAW,CAAC,CAEhE,GAAIC,QAAQ,CAACE,MAAM,GAAKb,UAAU,CAACc,OAAO,CAAE,CACxC,KAAM,KAAI,CAACC,UAAU,CAACJ,QAAQ,CAAC,CACnC,CAEA,MAAO,MAAM,CAAAA,QAAQ,CAACK,IAAI,CAAC,CAAC,CAChC,CAAC,MAEDC,WAAW,CAAG,KAAO,CAAAZ,IAAY,EAAsB,CACnD,KAAM,CAAAE,GAAW,IAAAC,MAAA,CAAM,IAAI,CAACC,UAAU,CAAC,CAAC,iBAAAD,MAAA,CAAeH,IAAI,CAAE,CAC7D,KAAM,CAAAM,QAAkB,CAAG,KAAM,KAAI,CAACO,OAAO,CAACX,GAAG,CAAC,CAElD,GAAII,QAAQ,CAACE,MAAM,GAAKb,UAAU,CAACmB,OAAO,CAAE,CACxC,KAAM,KAAI,CAACJ,UAAU,CAACJ,QAAQ,CAAC,CACnC,CAEA,MAAO,MAAM,CAAAA,QAAQ,CAACK,IAAI,CAAC,CAAC,CAChC,CAAC,MAEDI,WAAW,CAAG,MAAOC,EAAU,CAAEhB,IAAY,GAAoB,CAC7D,KAAM,CAAAE,GAAW,IAAAC,MAAA,CAAM,IAAI,CAACC,UAAU,CAAC,CAAC,YAAAD,MAAA,CAAUa,EAAE,WAAAb,MAAA,CAASH,IAAI,CAAE,CACnE,KAAM,CAAAM,QAAkB,CAAG,KAAM,KAAI,CAACO,OAAO,CAACX,GAAG,CAAC,CAElD,GAAII,QAAQ,CAACE,MAAM,GAAKb,UAAU,CAACmB,OAAO,CAAE,CACxC,KAAM,KAAI,CAACJ,UAAU,CAACJ,QAAQ,CAAC,CACnC,CAEA,MAAO,MAAM,CAAAA,QAAQ,CAACK,IAAI,CAAC,CAAC,CAChC,CAAC,MAEDM,aAAa,CAAG,MACZD,EAAU,CACVhB,IAAY,CACZkB,KAAa,GACG,CAChB,KAAM,CAAAhB,GAAW,IAAAC,MAAA,CAAM,IAAI,CAACC,UAAU,CAAC,CAAC,YAAAD,MAAA,CAAUa,EAAE,CAAE,CACtD,KAAM,CAAAX,WAAW,CAAG,CAChBL,IAAI,CAAEA,IAAI,CACVkB,KAAK,CAAEA,KACX,CAAC,CAED,KAAM,CAAAZ,QAAkB,CAAG,KAAM,KAAI,CAACa,SAAS,CAACjB,GAAG,CAAEG,WAAW,CAAC,CAEjE,GAAIC,QAAQ,CAACE,MAAM,GAAKb,UAAU,CAACmB,OAAO,CAAE,CACxC,KAAM,KAAI,CAACJ,UAAU,CAACJ,QAAQ,CAAC,CACnC,CACA,MAAO,MAAM,CAAAA,QAAQ,CAACK,IAAI,CAAC,CAAC,CAChC,CAAC,EACL","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}