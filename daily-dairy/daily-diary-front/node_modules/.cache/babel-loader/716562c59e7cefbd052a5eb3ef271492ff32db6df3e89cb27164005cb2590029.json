{"ast":null,"code":"import{Card,CardContent,CardHeader,Container}from\"@mui/material\";import PostListItem from\"../../components/Post/PostListItem/PostListItem\";import DateButtonGroup from\"../../components/Post/DateButtonGroup/DateButtonGroup\";import{useContext,useEffect}from\"react\";import{GlobalContext}from\"../../contexts/PostsContext\";import{PostService}from\"../../services/post/postService\";import{convertDateToFormat}from\"../../utils/utils\";import{CustomError}from\"../../utils/customError\";import{isToday}from\"date-fns\";import{useLocation}from\"react-router-dom\";import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";export default function PostPage(){const location=useLocation();const postService=new PostService();const{posts,searchDate,isVoted,isAddedNew,updatePosts,updateLoading,updateNotify,updateIsVoted,updateIsAddedNew,updateSearchDate}=useContext(GlobalContext);useEffect(()=>{updateSearchDate(new Date());},[location]);useEffect(()=>{fetchPosts();},[searchDate,isVoted,isAddedNew]);const fetchPosts=async()=>{updateLoading(true);updateIsVoted(false);updateIsAddedNew(false);try{const posts=await postService.getAllPosts(convertDateToFormat(searchDate,\"MM-dd-yyyy\"));updatePosts(posts);updateLoading(false);}catch(error){let errorMsg=\"Unknow error!\";if(error instanceof CustomError){errorMsg=error.message;}updateLoading(false);updateNotify({status:\"error\",message:errorMsg});}};return/*#__PURE__*/_jsx(Container,{maxWidth:\"xl\",children:/*#__PURE__*/_jsxs(Card,{variant:\"outlined\",sx:{m:2,p:2},children:[/*#__PURE__*/_jsx(CardHeader,{title:\"List Posts (\".concat(isToday(searchDate)?\"Today\":convertDateToFormat(searchDate,\"MMMM dd, yyyy\"),\")\")}),/*#__PURE__*/_jsxs(CardContent,{children:[/*#__PURE__*/_jsx(DateButtonGroup,{}),posts.length>0?/*#__PURE__*/_jsx(PostListItem,{}):/*#__PURE__*/_jsx(Card,{variant:\"outlined\",sx:{mt:4,mb:4},children:/*#__PURE__*/_jsx(CardContent,{children:\"There is no posts\"})}),/*#__PURE__*/_jsx(DateButtonGroup,{})]})]})});}","map":{"version":3,"names":["Card","CardContent","CardHeader","Container","PostListItem","DateButtonGroup","useContext","useEffect","GlobalContext","PostService","convertDateToFormat","CustomError","isToday","useLocation","jsx","_jsx","jsxs","_jsxs","PostPage","location","postService","posts","searchDate","isVoted","isAddedNew","updatePosts","updateLoading","updateNotify","updateIsVoted","updateIsAddedNew","updateSearchDate","Date","fetchPosts","getAllPosts","error","errorMsg","message","status","maxWidth","children","variant","sx","m","p","title","concat","length","mt","mb"],"sources":["D:/MIU/daily-diary-fullstackjs-ci-cd/daily-diary-front/src/pages/PostPage/PostPage.tsx"],"sourcesContent":["import { Card, CardContent, CardHeader, Container } from \"@mui/material\";\r\nimport PostListItem from \"../../components/Post/PostListItem/PostListItem\";\r\nimport DateButtonGroup from \"../../components/Post/DateButtonGroup/DateButtonGroup\";\r\nimport { useContext, useEffect } from \"react\";\r\nimport { GlobalContext } from \"../../contexts/PostsContext\";\r\nimport { PostService } from \"../../services/post/postService\";\r\nimport { convertDateToFormat } from \"../../utils/utils\";\r\nimport { Post } from \"../../models/Post\";\r\nimport { CustomError } from \"../../utils/customError\";\r\nimport { isToday } from \"date-fns\";\r\nimport { useLocation } from \"react-router-dom\";\r\n\r\nexport default function PostPage() {\r\n    const location = useLocation();\r\n    const postService = new PostService();\r\n    const {\r\n        posts,\r\n        searchDate,\r\n        isVoted,\r\n        isAddedNew,\r\n        updatePosts,\r\n        updateLoading,\r\n        updateNotify,\r\n        updateIsVoted,\r\n        updateIsAddedNew,\r\n        updateSearchDate,\r\n    } = useContext(GlobalContext);\r\n\r\n    useEffect(() => {\r\n        updateSearchDate(new Date());\r\n    }, [location]);\r\n\r\n    useEffect(() => {\r\n        fetchPosts();\r\n    }, [searchDate, isVoted, isAddedNew]);\r\n\r\n    const fetchPosts = async () => {\r\n        updateLoading(true);\r\n        updateIsVoted(false);\r\n        updateIsAddedNew(false);\r\n        try {\r\n            const posts: Post[] = await postService.getAllPosts(\r\n                convertDateToFormat(searchDate, \"MM-dd-yyyy\")\r\n            );\r\n            updatePosts(posts);\r\n            updateLoading(false);\r\n        } catch (error) {\r\n            let errorMsg: string = \"Unknow error!\";\r\n            if (error instanceof CustomError) {\r\n                errorMsg = error.message;\r\n            }\r\n\r\n            updateLoading(false);\r\n            updateNotify({\r\n                status: \"error\",\r\n                message: errorMsg,\r\n            });\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Container maxWidth=\"xl\">\r\n            <Card variant=\"outlined\" sx={{ m: 2, p: 2 }}>\r\n                <CardHeader\r\n                    title={`List Posts (${\r\n                        isToday(searchDate)\r\n                            ? \"Today\"\r\n                            : convertDateToFormat(searchDate, \"MMMM dd, yyyy\")\r\n                    })`}\r\n                />\r\n                <CardContent>\r\n                    <DateButtonGroup />\r\n                    {posts.length > 0 ? (\r\n                        <PostListItem />\r\n                    ) : (\r\n                        <Card variant=\"outlined\" sx={{ mt: 4, mb: 4 }}>\r\n                            <CardContent>There is no posts</CardContent>\r\n                        </Card>\r\n                    )}\r\n                    <DateButtonGroup />\r\n                </CardContent>\r\n            </Card>\r\n        </Container>\r\n    );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}